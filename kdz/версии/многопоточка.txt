#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <chrono>
#include <memory>
#include <thread>
#include <mutex>
#include <functional>

#include "./kdz/sorts.h"
#include "./kdz/utility.h"

using std::vector;

// чтобы изменить количество измерений каждой сортировки (усредненение), используйте переменные measurement_number_for_300 и
// measurement_number_for_4100

const uint64_t kMeasurementNumberFor300 = 10;
const uint64_t kMeasurementNumberFor4100 = 10;

// путь для таблиц сортировок
const std::string kSortTablesPath = "./kdz/sorts_tables/";

struct ThreadContext {
    int sort;
    vector<std::string>& sort_names;
    vector<std::string>& sort_postfixes_arrays;
    vector<std::string>& sort_postfixes_values;
    vector<vector<vector<vector<int>>>>& benchmarks;
    vector<std::function<int(vector<int>&)>> sort_functions;
};

std::mutex mtx;

void threadFunction(ThreadContext thread_context) {
    mtx.lock();
    vector<std::unique_ptr<std::ofstream>> tables_times;
    vector<std::unique_ptr<std::ofstream>> tables_operations;

    int sort = thread_context.sort;

    tables_times.emplace_back(new std::ofstream(kSortTablesPath + thread_context.sort_names[sort] + "_time_small.csv", std::ofstream::out | std::ofstream::trunc));
    tables_times.emplace_back(new std::ofstream(kSortTablesPath + thread_context.sort_names[sort] + "_time_big.csv", std::ofstream::out | std::ofstream::trunc));

    tables_operations.emplace_back(
        new std::ofstream(kSortTablesPath + thread_context.sort_names[sort] + "_operations_small.csv", std::ofstream::out | std::ofstream::trunc));
    tables_operations.emplace_back(
        new std::ofstream(kSortTablesPath + thread_context.sort_names[sort] + "_operations_big.csv", std::ofstream::out | std::ofstream::trunc));

    *tables_times[0] << "Sort";
    *tables_operations[0] << "Sort";
    for (int i = 50; i <= 300; i += 50) {
        *tables_times[0] << ';' << i;
        *tables_operations[0] << ';' << i;
    }
    *tables_times[0] << '\n';
    *tables_operations[0] << '\n';

    *tables_times[1] << "Sort";
    *tables_operations[1] << "Sort";
    for (int i = 100; i <= 4100; i += 100) {
        *tables_times[1] << ';' << i;
        *tables_operations[1] << ';' << i;
    }
    *tables_times[1] << '\n';
    *tables_operations[1] << '\n';

    for (int array_type = 0; array_type < 8; ++array_type) {
        *tables_times[0] << thread_context.sort_names[sort] + thread_context.sort_postfixes_arrays[array_type % 4] +
                                thread_context.sort_postfixes_values[array_type >= 4];
        *tables_times[1] << thread_context.sort_names[sort] + thread_context.sort_postfixes_arrays[array_type % 4] +
                                thread_context.sort_postfixes_values[array_type >= 4];

        *tables_operations[0] << thread_context.sort_names[sort] + thread_context.sort_postfixes_arrays[array_type % 4] +
                                     thread_context.sort_postfixes_values[array_type >= 4];
        *tables_operations[1] << thread_context.sort_names[sort] + thread_context.sort_postfixes_arrays[array_type % 4] +
                                     thread_context.sort_postfixes_values[array_type >= 4];

        vector<int> start_size = {49, 99};
        vector<int> max_size = {300, 4100};
        vector<int> step = {50, 100};
        vector<int> measurement = {kMeasurementNumberFor300, kMeasurementNumberFor4100};

        vector<vector<uint64_t>> times_values = {vector<uint64_t>(6), vector<uint64_t>(41)};
        vector<vector<uint64_t>> operations_values = {vector<uint64_t>(6), vector<uint64_t>(41)};
        vector<int> it = {0, 0};

        for (int table = 0; table < 2; ++table) {
            for (int size = start_size[table]; size < max_size[table]; size += step[table]) {
                uint64_t average_time = 0;
                uint64_t average_operations = 0;

                for (uint64_t count = 0; count < static_cast<uint64_t>(measurement[table]); ++count) {
                    vector<int> to_sort =
                        vector<int>(thread_context.benchmarks[table][array_type][count].begin(), thread_context.benchmarks[table][array_type][count].begin() + size);

                    auto start = std::chrono::high_resolution_clock::now();

                    average_operations += thread_context.sort_functions[sort](to_sort) / measurement[table];

                    auto elapsed = std::chrono::high_resolution_clock::now() - start;
                    uint64_t nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(elapsed).count();

                    average_time += (nanoseconds / measurement[table]);
                }

                times_values[table][it[table]] = average_time;
                operations_values[table][it[table]] = average_operations;
                ++it[table];
            }

            for (auto value : times_values[table]) {
                *tables_times[table] << ';' << value;
            }
            for (auto value : operations_values[table]) {
                *tables_operations[table] << ';' << value;
            }
            *tables_times[table] << '\n';
            *tables_operations[table] << '\n';
        }
    }
    for (int close = 0; close < static_cast<int>(tables_times.size()); ++close) {
        tables_times[close]->close();
        tables_operations[close]->close();
    }
    tables_times.clear();
    tables_operations.clear();
    mtx.unlock();
}

int main() {
    auto start_time = std::chrono::high_resolution_clock::now();

    srand(time(nullptr));

    // количество сортировок
    const int sorts_count = 13;

    // указатели на сортировки
    std::vector<std::function<int(std::vector<int>&)>> sort_functions = {selectionSort, bubbleSort, firstIverson, secondIverson, insertionSort, binaryInsertionSort,
                                                                         countingSort,  radixSort,  mergeSort,    quickSort,     heapSort,      ciuraShellSort,
                                                                         shellSort};

    // имена сортировок
    vector<std::string> sort_names = {"SelectionSort", "BubbleSort", "FirstIverson", "SecondIverson", "InsertionSort", "BinaryInsertionSort",
                                      "CountingSort",  "RadixSort",  "MergeSort",    "QuickSort",     "HeapSort",      "ShellSortCiura",
                                      "ShellSort"};

    vector<std::string> sort_postfixes_arrays = {"", " sorted", " almost sorted", " reversed"};
    vector<std::string> sort_postfixes_values = {" values 0-5", " values 0-4000"};

    int count_300 = static_cast<int>(kMeasurementNumberFor300);
    int count_4100 = static_cast<int>(kMeasurementNumberFor4100);

    vector<vector<int>> benchmarks_50_to_300_values_5(count_300);
    vector<vector<int>> benchmarks_50_to_300_values_4000(count_300);
    vector<vector<int>> sorted_benchmarks_50_to_300_values_5(count_300);
    vector<vector<int>> sorted_benchmarks_50_to_300_values_4000(count_300);
    vector<vector<int>> almost_sorted_benchmarks_50_to_300_values_5(count_300);
    vector<vector<int>> almost_sorted_benchmarks_50_to_300_values_4000(count_300);
    vector<vector<int>> reversed_benchmarks_50_to_300_values_5(count_300);
    vector<vector<int>> reversed_benchmarks_50_to_300_values_4000(count_300);

    vector<vector<int>> benchmarks_100_to_4100_values_5(count_4100);
    vector<vector<int>> benchmarks_100_to_4100_values_4000(count_4100);
    vector<vector<int>> sorted_benchmarks_100_to_4100_values_5(count_4100);
    vector<vector<int>> sorted_benchmarks_100_to_4100_values_4000(count_4100);
    vector<vector<int>> almost_sorted_benchmarks_100_to_4100_values_5(count_4100);
    vector<vector<int>> almost_sorted_benchmarks_100_to_4100_values_4000(count_4100);
    vector<vector<int>> reversed_benchmarks_100_to_4100_values_5(count_4100);
    vector<vector<int>> reversed_benchmarks_100_to_4100_values_4000(count_4100);

    vector<int> bench_cycle = {count_300, count_4100};
    for (int cycle = 0; cycle < 2; ++cycle) {
        vector<vector<int>> values_50_to_300 = (!cycle ? benchmarks_50_to_300_values_5 : benchmarks_50_to_300_values_4000);
        int n_300 = values_50_to_300.size();
        vector<vector<int>> sorted_values_50_to_300(n_300);
        vector<vector<int>> almost_sorted_values_50_to_300(n_300);
        vector<vector<int>> reversed_values_50_to_300(n_300);

        vector<vector<int>> values_100_to_4100 = (!cycle ? benchmarks_100_to_4100_values_5 : benchmarks_100_to_4100_values_4000);
        int n_4100 = values_100_to_4100.size();
        vector<vector<int>> sorted_values_100_to_4100(n_4100);
        vector<vector<int>> almost_sorted_values_100_to_4100(n_4100);
        vector<vector<int>> reversed_values_100_to_4100(n_4100);

        for (int i = 0; i < bench_cycle[cycle]; ++i) {
            vector<int> temp_300(300);
            vector<int> temp_4100(4100);

            generateRandom(temp_300, !cycle ? 6 : 4001);
            generateRandom(temp_4100, !cycle ? 6 : 4001);

            values_50_to_300[i] = temp_300;
            values_100_to_4100[i] = temp_4100;

            sorted_values_50_to_300[i] = temp_300;
            sorted_values_100_to_4100[i] = temp_4100;
            sortArray(sorted_values_50_to_300[i]);
            sortArray(sorted_values_100_to_4100[i]);

            reversed_values_50_to_300[i] = sorted_values_50_to_300[i];
            reversed_values_100_to_4100[i] = sorted_values_100_to_4100[i];
            reverseArray(reversed_values_50_to_300[i]);
            reverseArray(reversed_values_100_to_4100[i]);

            almost_sorted_values_50_to_300[i] = sorted_values_50_to_300[i];
            almost_sorted_values_100_to_4100[i] = sorted_values_100_to_4100[i];
            swapRandomElements(almost_sorted_values_50_to_300[i]);
            swapRandomElements(almost_sorted_values_100_to_4100[i]);
        }
        (!cycle ? benchmarks_50_to_300_values_5 : benchmarks_50_to_300_values_4000) = values_50_to_300;
        (!cycle ? benchmarks_100_to_4100_values_5 : benchmarks_100_to_4100_values_4000) = values_100_to_4100;

        (!cycle ? sorted_benchmarks_50_to_300_values_5 : sorted_benchmarks_50_to_300_values_4000) = sorted_values_50_to_300;
        (!cycle ? sorted_benchmarks_100_to_4100_values_5 : sorted_benchmarks_100_to_4100_values_4000) = sorted_values_100_to_4100;

        (!cycle ? almost_sorted_benchmarks_50_to_300_values_5 : almost_sorted_benchmarks_50_to_300_values_4000) = almost_sorted_values_50_to_300;
        (!cycle ? almost_sorted_benchmarks_100_to_4100_values_5 : almost_sorted_benchmarks_100_to_4100_values_4000) = almost_sorted_values_100_to_4100;

        (!cycle ? reversed_benchmarks_50_to_300_values_5 : reversed_benchmarks_50_to_300_values_4000) = reversed_values_50_to_300;
        (!cycle ? reversed_benchmarks_100_to_4100_values_5 : reversed_benchmarks_100_to_4100_values_4000) = reversed_values_100_to_4100;
    }

    vector<vector<vector<int>>> benchmarks_50_to_300 = {benchmarks_50_to_300_values_5,
                                                        sorted_benchmarks_50_to_300_values_5,
                                                        almost_sorted_benchmarks_50_to_300_values_5,
                                                        reversed_benchmarks_50_to_300_values_5,
                                                        benchmarks_50_to_300_values_4000,
                                                        sorted_benchmarks_50_to_300_values_4000,
                                                        almost_sorted_benchmarks_50_to_300_values_4000,
                                                        reversed_benchmarks_50_to_300_values_4000};

    vector<vector<vector<int>>> benchmarks_100_to_4100 = {benchmarks_100_to_4100_values_5,
                                                          sorted_benchmarks_100_to_4100_values_5,
                                                          almost_sorted_benchmarks_100_to_4100_values_5,
                                                          reversed_benchmarks_100_to_4100_values_5,
                                                          benchmarks_100_to_4100_values_4000,
                                                          sorted_benchmarks_100_to_4100_values_4000,
                                                          almost_sorted_benchmarks_100_to_4100_values_4000,
                                                          reversed_benchmarks_100_to_4100_values_4000};

    vector<vector<vector<vector<int>>>> benchmarks = {benchmarks_50_to_300, benchmarks_100_to_4100};

    vector<std::thread> threads(sorts_count);

    for (int sort = 0; sort < sorts_count; ++sort) {
        ThreadContext thread_context = {sort, sort_names, sort_postfixes_arrays, sort_postfixes_values, benchmarks, sort_functions};
        threads[sort] = std::thread(threadFunction, thread_context);
    }
    for (int join = 0; join < sorts_count; ++join) {
        threads[join].join();
    }

    auto end_time = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::seconds>(end_time - start_time);
    std::cout << "Time taken: " << duration.count() << " seconds" << std::endl;
    return 0;
}
