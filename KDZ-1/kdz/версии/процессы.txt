#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <chrono>
#include <memory>
#include <unistd.h>
#include <sys/wait.h>

#include "./kdz/sorts.h"
#include "./kdz/utility.h"

using std::vector;

// чтобы изменить количество измерений каждой сортировки (усредненение), используйте переменные measurement_number_for_300 и
// measurement_number_for_4100

const uint64_t kMeasurementNumberFor300 = 50;
const uint64_t kMeasurementNumberFor4100 = 50;

// путь для таблиц сортировок
const std::string kSortTablesPath = "./kdz/sorts_tables/";
const std::string kSmallTableName = "sorts_50_to_300.csv";
const std::string kBigTableName = "sorts_100_to_4100.csv";

int main() {
    auto start_time = std::chrono::high_resolution_clock::now();

    srand(time(nullptr));

    // количество сортировок
    const int sorts_count = 13;

    // указатели на сортировки
    void (*sort_functions_pointers[sorts_count])(vector<int>&) = {selectionSort, bubbleSort, firstIverson, secondIverson, insertionSort, binaryInsertionSort,
                                                                  countingSort,  radixSort,  mergeSort,    quickSort,     heapSort,      ciuraShellSort,
                                                                  shellSort};

    // имена сортировок
    vector<std::string> sort_names = {"SelectionSort", "BubbleSort", "FirstIverson", "SecondIverson", "InsertionSort", "BinaryInsertionSort",
                                      "CountingSort",  "RadixSort",  "MergeSort",    "QuickSort",     "HeapSort",      "ShellSort (Ciura)",
                                      "ShellSort"};

    vector<std::string> sort_postfixes_arrays = {"", " sorted", " almost sorted", " reversed"};
    vector<std::string> sort_postfixes_values = {" values 0-5", " values 0-4000"};

    int count_300 = static_cast<int>(kMeasurementNumberFor300);
    int count_4100 = static_cast<int>(kMeasurementNumberFor4100);

    vector<vector<int>> benchmarks_50_to_300_values_5(count_300);
    vector<vector<int>> benchmarks_50_to_300_values_4000(count_300);
    vector<vector<int>> sorted_benchmarks_50_to_300_values_5(count_300);
    vector<vector<int>> sorted_benchmarks_50_to_300_values_4000(count_300);
    vector<vector<int>> almost_sorted_benchmarks_50_to_300_values_5(count_300);
    vector<vector<int>> almost_sorted_benchmarks_50_to_300_values_4000(count_300);
    vector<vector<int>> reversed_benchmarks_50_to_300_values_5(count_300);
    vector<vector<int>> reversed_benchmarks_50_to_300_values_4000(count_300);

    vector<vector<int>> benchmarks_100_to_4100_values_5(count_4100);
    vector<vector<int>> benchmarks_100_to_4100_values_4000(count_4100);
    vector<vector<int>> sorted_benchmarks_100_to_4100_values_5(count_4100);
    vector<vector<int>> sorted_benchmarks_100_to_4100_values_4000(count_4100);
    vector<vector<int>> almost_sorted_benchmarks_100_to_4100_values_5(count_4100);
    vector<vector<int>> almost_sorted_benchmarks_100_to_4100_values_4000(count_4100);
    vector<vector<int>> reversed_benchmarks_100_to_4100_values_5(count_4100);
    vector<vector<int>> reversed_benchmarks_100_to_4100_values_4000(count_4100);

    vector<int> bench_cycle = {count_300, count_4100};
    for (int cycle = 0; cycle < 2; ++cycle) {
        vector<vector<int>> values_50_to_300 = (!cycle ? benchmarks_50_to_300_values_5 : benchmarks_50_to_300_values_4000);
        int n_300 = values_50_to_300.size();
        vector<vector<int>> sorted_values_50_to_300(n_300);
        vector<vector<int>> almost_sorted_values_50_to_300(n_300);
        vector<vector<int>> reversed_values_50_to_300(n_300);

        vector<vector<int>> values_100_to_4100 = (!cycle ? benchmarks_100_to_4100_values_5 : benchmarks_100_to_4100_values_4000);
        int n_4100 = values_100_to_4100.size();
        vector<vector<int>> sorted_values_100_to_4100(n_4100);
        vector<vector<int>> almost_sorted_values_100_to_4100(n_4100);
        vector<vector<int>> reversed_values_100_to_4100(n_4100);

        for (int i = 0; i < bench_cycle[cycle]; ++i) {
            vector<int> temp_300(300);
            vector<int> temp_4100(4100);

            generateRandom(temp_300, !cycle ? 6 : 4001);
            generateRandom(temp_4100, !cycle ? 6 : 4001);

            values_50_to_300[i] = temp_300;
            values_100_to_4100[i] = temp_4100;

            sorted_values_50_to_300[i] = temp_300;
            sorted_values_100_to_4100[i] = temp_4100;
            sort(sorted_values_50_to_300[i]);
            sort(sorted_values_100_to_4100[i]);

            reversed_values_50_to_300[i] = sorted_values_50_to_300[i];
            reversed_values_100_to_4100[i] = sorted_values_100_to_4100[i];
            reverse(reversed_values_50_to_300[i]);
            reverse(reversed_values_50_to_300[i]);

            almost_sorted_values_50_to_300[i] = sorted_values_50_to_300[i];
            almost_sorted_values_100_to_4100[i] = sorted_values_100_to_4100[i];
            almostSort(almost_sorted_values_50_to_300[i]);
            almostSort(almost_sorted_values_100_to_4100[i]);
        }
        (!cycle ? benchmarks_50_to_300_values_5 : benchmarks_50_to_300_values_4000) = values_50_to_300;
        (!cycle ? benchmarks_100_to_4100_values_5 : benchmarks_100_to_4100_values_4000) = values_100_to_4100;

        (!cycle ? sorted_benchmarks_50_to_300_values_5 : sorted_benchmarks_50_to_300_values_4000) = sorted_values_50_to_300;
        (!cycle ? sorted_benchmarks_100_to_4100_values_5 : sorted_benchmarks_100_to_4100_values_4000) = sorted_values_100_to_4100;

        (!cycle ? almost_sorted_benchmarks_50_to_300_values_5 : almost_sorted_benchmarks_50_to_300_values_4000) = almost_sorted_values_50_to_300;
        (!cycle ? almost_sorted_benchmarks_100_to_4100_values_5 : almost_sorted_benchmarks_100_to_4100_values_4000) = almost_sorted_values_100_to_4100;

        (!cycle ? reversed_benchmarks_50_to_300_values_5 : reversed_benchmarks_50_to_300_values_4000) = reversed_values_50_to_300;
        (!cycle ? reversed_benchmarks_100_to_4100_values_5 : reversed_benchmarks_100_to_4100_values_4000) = reversed_values_100_to_4100;
    }

    vector<vector<vector<int>>> benchmarks_50_to_300 = {benchmarks_50_to_300_values_5,
                                                        sorted_benchmarks_50_to_300_values_5,
                                                        almost_sorted_benchmarks_50_to_300_values_5,
                                                        reversed_benchmarks_50_to_300_values_5,
                                                        benchmarks_50_to_300_values_4000,
                                                        sorted_benchmarks_50_to_300_values_4000,
                                                        almost_sorted_benchmarks_50_to_300_values_4000,
                                                        reversed_benchmarks_50_to_300_values_4000};

    vector<vector<vector<int>>> benchmarks_100_to_4100 = {benchmarks_100_to_4100_values_5,
                                                          sorted_benchmarks_100_to_4100_values_5,
                                                          almost_sorted_benchmarks_100_to_4100_values_5,
                                                          reversed_benchmarks_100_to_4100_values_5,
                                                          benchmarks_100_to_4100_values_4000,
                                                          sorted_benchmarks_100_to_4100_values_4000,
                                                          almost_sorted_benchmarks_100_to_4100_values_4000,
                                                          reversed_benchmarks_100_to_4100_values_4000};

    pid_t children[sorts_count];
    for (int sort = 0; sort < sorts_count; ++sort) {
        pid_t pid = fork();

        if (pid == 0) {
            auto start_time = std::chrono::high_resolution_clock::now();

            vector<std::unique_ptr<std::ofstream>> tables;
            tables.emplace_back(new std::ofstream(kSortTablesPath + sort_names[sort] + "_small.csv", std::ofstream::out | std::ofstream::trunc));
            tables.emplace_back(new std::ofstream(kSortTablesPath + sort_names[sort] + "_big.csv", std::ofstream::out | std::ofstream::trunc));

            *tables[0] << "Sort";
            for (int i = 50; i <= 300; i += 50) {
                *tables[0] << ';' << i;
            }
            *tables[0] << '\n';

            *tables[1] << "Sort";
            for (int i = 100; i <= 4100; i += 100) {
                *tables[1] << ';' << i;
            }
            *tables[1] << '\n';

            for (int array_type = 0; array_type < 8; ++array_type) {
                *tables[0] << sort_names[sort] + sort_postfixes_arrays[array_type % 4] + sort_postfixes_values[array_type >= 4];
                *tables[1] << sort_names[sort] + sort_postfixes_arrays[array_type % 4] + sort_postfixes_values[array_type >= 4];

                vector<int> start_size = {49, 99};
                vector<int> max_size = {300, 4100};
                vector<int> step = {50, 100};
                vector<int> measurement = {kMeasurementNumberFor300, kMeasurementNumberFor4100};
                vector<vector<vector<vector<int>>>> benchmarks = {benchmarks_50_to_300, benchmarks_100_to_4100};

                for (int table = 0; table < 2; ++table) {
                    for (int size = start_size[table]; size < max_size[table]; size += step[table]) {
                        uint64_t average_time = 0;

                        for (uint64_t count = 0; count < static_cast<uint64_t>(measurement[table]); ++count) {
                            vector<int> to_sort = vector<int>(benchmarks[table][array_type][count].begin(), benchmarks[table][array_type][count].begin() + size);

                            auto start = std::chrono::high_resolution_clock::now();

                            (*sort_functions_pointers[sort])(to_sort);

                            auto end = std::chrono::high_resolution_clock::now();
                            uint64_t duration = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count();

                            average_time += (duration / measurement[table]);
                        }

                        *tables[table] << ';' << average_time;
                    }
                    *tables[table] << '\n';
                }
            }
            for (int close = 0; close < static_cast<int>(tables.size()); ++close) {
                tables[close]->close();
            }
            tables.clear();

            auto end_time = std::chrono::high_resolution_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::seconds>(end_time - start_time);
            std::cout << '\n' <<  sort << ' ' << sort_names[sort]  << " completed. Time taken: " << duration.count() << " seconds";
            return 0;
        } else {
            children[sort] = pid;
        }
    }

    for (int i = 0; i < sorts_count; ++i) {
        int status;
        waitpid(children[i], &status, 0);
    }

    auto end_time = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::seconds>(end_time - start_time);
    std::cout << "Time taken: " << duration.count() << " seconds" << std::endl;
    return 0;
}